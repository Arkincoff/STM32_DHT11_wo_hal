
DHT11_wo_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b4c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ce4  08000ce4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ce4  08000ce4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000ce4  08000ce4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ce4  08000ce4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ce4  08000ce4  00010ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ce8  08000ce8  00010ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000008  08000cf4  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08000cf4  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007177  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010a8  00000000  00000000  000271af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  00028258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  00028a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010d5  00000000  00000000  000291d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e90  00000000  00000000  0002a2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008735c  00000000  00000000  00033135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ba491  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020ac  00000000  00000000  000ba4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000008 	.word	0x20000008
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000ccc 	.word	0x08000ccc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000000c 	.word	0x2000000c
 80001d4:	08000ccc 	.word	0x08000ccc

080001d8 <TimerDelay_Init>:
#define TIMER  TIM5
volatile static TIM_HandleTypeDef HTIMx;
volatile static uint32_t gu32_ticks = 0;

void TimerDelay_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af00      	add	r7, sp, #0
	gu32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80001de:	f000 fa4b 	bl	8000678 <HAL_RCC_GetHCLKFreq>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a28      	ldr	r2, [pc, #160]	; (8000288 <TimerDelay_Init+0xb0>)
 80001e6:	fba2 2303 	umull	r2, r3, r2, r3
 80001ea:	0c9b      	lsrs	r3, r3, #18
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <TimerDelay_Init+0xb4>)
 80001ee:	6013      	str	r3, [r2, #0]
	HTIMx.Instance = TIMER;
 80001f0:	4b27      	ldr	r3, [pc, #156]	; (8000290 <TimerDelay_Init+0xb8>)
 80001f2:	4a28      	ldr	r2, [pc, #160]	; (8000294 <TimerDelay_Init+0xbc>)
 80001f4:	601a      	str	r2, [r3, #0]

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80001f6:	f107 0308 	add.w	r3, r7, #8
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000204:	463b      	mov	r3, r7
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]


    HTIMx.Init.Prescaler = gu32_ticks-1;
 800020c:	4b1f      	ldr	r3, [pc, #124]	; (800028c <TimerDelay_Init+0xb4>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	3b01      	subs	r3, #1
 8000212:	4a1f      	ldr	r2, [pc, #124]	; (8000290 <TimerDelay_Init+0xb8>)
 8000214:	6053      	str	r3, [r2, #4]
    HTIMx.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000216:	4b1e      	ldr	r3, [pc, #120]	; (8000290 <TimerDelay_Init+0xb8>)
 8000218:	2200      	movs	r2, #0
 800021a:	609a      	str	r2, [r3, #8]
    HTIMx.Init.Period = 65535;
 800021c:	4b1c      	ldr	r3, [pc, #112]	; (8000290 <TimerDelay_Init+0xb8>)
 800021e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000222:	60da      	str	r2, [r3, #12]
    HTIMx.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000224:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <TimerDelay_Init+0xb8>)
 8000226:	2200      	movs	r2, #0
 8000228:	611a      	str	r2, [r3, #16]
    HTIMx.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800022a:	4b19      	ldr	r3, [pc, #100]	; (8000290 <TimerDelay_Init+0xb8>)
 800022c:	2280      	movs	r2, #128	; 0x80
 800022e:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&HTIMx) != HAL_OK)
 8000230:	4817      	ldr	r0, [pc, #92]	; (8000290 <TimerDelay_Init+0xb8>)
 8000232:	f000 fa2d 	bl	8000690 <HAL_TIM_Base_Init>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <TimerDelay_Init+0x68>
    {
      Error_Handler();
 800023c:	f000 f97a 	bl	8000534 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000244:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&HTIMx, &sClockSourceConfig) != HAL_OK)
 8000246:	f107 0308 	add.w	r3, r7, #8
 800024a:	4619      	mov	r1, r3
 800024c:	4810      	ldr	r0, [pc, #64]	; (8000290 <TimerDelay_Init+0xb8>)
 800024e:	f000 fac9 	bl	80007e4 <HAL_TIM_ConfigClockSource>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <TimerDelay_Init+0x84>
    {
      Error_Handler();
 8000258:	f000 f96c 	bl	8000534 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800025c:	2300      	movs	r3, #0
 800025e:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000260:	2300      	movs	r3, #0
 8000262:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&HTIMx, &sMasterConfig) != HAL_OK)
 8000264:	463b      	mov	r3, r7
 8000266:	4619      	mov	r1, r3
 8000268:	4809      	ldr	r0, [pc, #36]	; (8000290 <TimerDelay_Init+0xb8>)
 800026a:	f000 fc9d 	bl	8000ba8 <HAL_TIMEx_MasterConfigSynchronization>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <TimerDelay_Init+0xa0>
    {
      Error_Handler();
 8000274:	f000 f95e 	bl	8000534 <Error_Handler>
    }

    HAL_TIM_Base_Start(&HTIMx);
 8000278:	4805      	ldr	r0, [pc, #20]	; (8000290 <TimerDelay_Init+0xb8>)
 800027a:	f000 fa59 	bl	8000730 <HAL_TIM_Base_Start>

}
 800027e:	bf00      	nop
 8000280:	3718      	adds	r7, #24
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	431bde83 	.word	0x431bde83
 800028c:	2000006c 	.word	0x2000006c
 8000290:	20000024 	.word	0x20000024
 8000294:	40000c00 	.word	0x40000c00

08000298 <delay_us>:

void delay_us(volatile uint16_t au16_us)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	80fb      	strh	r3, [r7, #6]
	HTIMx.Instance->CNT = 0;
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <delay_us+0x30>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2200      	movs	r2, #0
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24
	while (HTIMx.Instance->CNT < au16_us);
 80002aa:	bf00      	nop
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <delay_us+0x30>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b2:	88fa      	ldrh	r2, [r7, #6]
 80002b4:	b292      	uxth	r2, r2
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d3f8      	bcc.n	80002ac <delay_us+0x14>
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	20000024 	.word	0x20000024

080002cc <delay_ms>:

void delay_ms(volatile uint16_t au16_ms)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	80fb      	strh	r3, [r7, #6]
	while(au16_ms > 0)
 80002d6:	e00f      	b.n	80002f8 <delay_ms+0x2c>
	{
		HTIMx.Instance->CNT = 0;
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <delay_ms+0x44>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2200      	movs	r2, #0
 80002de:	625a      	str	r2, [r3, #36]	; 0x24
		au16_ms--;
 80002e0:	88fb      	ldrh	r3, [r7, #6]
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	3b01      	subs	r3, #1
 80002e6:	b29b      	uxth	r3, r3
 80002e8:	80fb      	strh	r3, [r7, #6]
		while (HTIMx.Instance->CNT < 1000);
 80002ea:	bf00      	nop
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <delay_ms+0x44>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002f6:	d3f9      	bcc.n	80002ec <delay_ms+0x20>
	while(au16_ms > 0)
 80002f8:	88fb      	ldrh	r3, [r7, #6]
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d1eb      	bne.n	80002d8 <delay_ms+0xc>
	}
}
 8000300:	bf00      	nop
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	20000024 	.word	0x20000024

08000314 <DHT_Init>:
uint16_t Temp, Humid;

float Temperature = 0;
float Humidity = 0;

void DHT_Init(void){
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <DHT_Init+0x1c>)
 800031a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <DHT_Init+0x1c>)
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800

08000334 <DHT_Start>:

void DHT_Start(void){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	GPIOA->MODER |= (1<<10);
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <DHT_Start+0x74>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a1a      	ldr	r2, [pc, #104]	; (80003a8 <DHT_Start+0x74>)
 800033e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000342:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1<<11);
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <DHT_Start+0x74>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <DHT_Start+0x74>)
 800034a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800034e:	6013      	str	r3, [r2, #0]
	GPIOA->ODR &=~ PIN5_H;
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <DHT_Start+0x74>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <DHT_Start+0x74>)
 8000356:	f023 0320 	bic.w	r3, r3, #32
 800035a:	6153      	str	r3, [r2, #20]
	delay_ms(18);
 800035c:	2012      	movs	r0, #18
 800035e:	f7ff ffb5 	bl	80002cc <delay_ms>
	GPIOA->ODR |= PIN5_H;
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <DHT_Start+0x74>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	4a10      	ldr	r2, [pc, #64]	; (80003a8 <DHT_Start+0x74>)
 8000368:	f043 0320 	orr.w	r3, r3, #32
 800036c:	6153      	str	r3, [r2, #20]
	delay_us(20);
 800036e:	2014      	movs	r0, #20
 8000370:	f7ff ff92 	bl	8000298 <delay_us>
	GPIOA->MODER &=~(1<<10);
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <DHT_Start+0x74>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <DHT_Start+0x74>)
 800037a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800037e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1<<11);
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <DHT_Start+0x74>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a08      	ldr	r2, [pc, #32]	; (80003a8 <DHT_Start+0x74>)
 8000386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800038a:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR |= (1<<10);
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <DHT_Start+0x74>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	4a05      	ldr	r2, [pc, #20]	; (80003a8 <DHT_Start+0x74>)
 8000392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000396:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &=~(1<<11);
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <DHT_Start+0x74>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	4a02      	ldr	r2, [pc, #8]	; (80003a8 <DHT_Start+0x74>)
 800039e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003a2:	60d3      	str	r3, [r2, #12]
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40020000 	.word	0x40020000

080003ac <check_Response>:

uint8_t check_Response(void){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	delay_us(40);
 80003b0:	2028      	movs	r0, #40	; 0x28
 80003b2:	f7ff ff71 	bl	8000298 <delay_us>
	if(!(GPIOA->IDR & PIN5_H)){
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <check_Response+0x4c>)
 80003b8:	691b      	ldr	r3, [r3, #16]
 80003ba:	f003 0320 	and.w	r3, r3, #32
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d10f      	bne.n	80003e2 <check_Response+0x36>
		delay_us(80);
 80003c2:	2050      	movs	r0, #80	; 0x50
 80003c4:	f7ff ff68 	bl	8000298 <delay_us>
		if(GPIOA->IDR & PIN5_H){
 80003c8:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <check_Response+0x4c>)
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	f003 0320 	and.w	r3, r3, #32
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d003      	beq.n	80003dc <check_Response+0x30>
			Response = 1;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <check_Response+0x50>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	701a      	strb	r2, [r3, #0]
 80003da:	e002      	b.n	80003e2 <check_Response+0x36>
		}
		else{
			Response = -1;
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <check_Response+0x50>)
 80003de:	22ff      	movs	r2, #255	; 0xff
 80003e0:	701a      	strb	r2, [r3, #0]
		}
	}
	while((GPIOA->IDR & PIN5_H));
 80003e2:	bf00      	nop
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <check_Response+0x4c>)
 80003e6:	691b      	ldr	r3, [r3, #16]
 80003e8:	f003 0320 	and.w	r3, r3, #32
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d1f9      	bne.n	80003e4 <check_Response+0x38>
	return Response;
 80003f0:	4b02      	ldr	r3, [pc, #8]	; (80003fc <check_Response+0x50>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40020000 	.word	0x40020000
 80003fc:	20000070 	.word	0x20000070

08000400 <DHT_Read>:

uint8_t DHT_Read(void){
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
	uint8_t data;
	for(int i = 0;i<8;i++){
 8000406:	2300      	movs	r3, #0
 8000408:	603b      	str	r3, [r7, #0]
 800040a:	e034      	b.n	8000476 <DHT_Read+0x76>
		while(!(GPIOA->IDR & PIN5_H));
 800040c:	bf00      	nop
 800040e:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <DHT_Read+0x88>)
 8000410:	691b      	ldr	r3, [r3, #16]
 8000412:	f003 0320 	and.w	r3, r3, #32
 8000416:	2b00      	cmp	r3, #0
 8000418:	d0f9      	beq.n	800040e <DHT_Read+0xe>
		delay_us(40);
 800041a:	2028      	movs	r0, #40	; 0x28
 800041c:	f7ff ff3c 	bl	8000298 <delay_us>
		if(!(GPIOA->IDR & PIN5_H)){
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <DHT_Read+0x88>)
 8000422:	691b      	ldr	r3, [r3, #16]
 8000424:	f003 0320 	and.w	r3, r3, #32
 8000428:	2b00      	cmp	r3, #0
 800042a:	d10e      	bne.n	800044a <DHT_Read+0x4a>
			data &=~(1<<(7-i));
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	f1c3 0307 	rsb	r3, r3, #7
 8000432:	2201      	movs	r2, #1
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	b25b      	sxtb	r3, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	b25a      	sxtb	r2, r3
 800043e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000442:	4013      	ands	r3, r2
 8000444:	b25b      	sxtb	r3, r3
 8000446:	71fb      	strb	r3, [r7, #7]
 8000448:	e00b      	b.n	8000462 <DHT_Read+0x62>
		}
		else{
			data |= (1<<(7-i));
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	f1c3 0307 	rsb	r3, r3, #7
 8000450:	2201      	movs	r2, #1
 8000452:	fa02 f303 	lsl.w	r3, r2, r3
 8000456:	b25a      	sxtb	r2, r3
 8000458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045c:	4313      	orrs	r3, r2
 800045e:	b25b      	sxtb	r3, r3
 8000460:	71fb      	strb	r3, [r7, #7]
		}
		while(GPIOA->IDR & PIN5_H);
 8000462:	bf00      	nop
 8000464:	4b08      	ldr	r3, [pc, #32]	; (8000488 <DHT_Read+0x88>)
 8000466:	691b      	ldr	r3, [r3, #16]
 8000468:	f003 0320 	and.w	r3, r3, #32
 800046c:	2b00      	cmp	r3, #0
 800046e:	d1f9      	bne.n	8000464 <DHT_Read+0x64>
	for(int i = 0;i<8;i++){
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	3301      	adds	r3, #1
 8000474:	603b      	str	r3, [r7, #0]
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	2b07      	cmp	r3, #7
 800047a:	ddc7      	ble.n	800040c <DHT_Read+0xc>
	}
	return data;
 800047c:	79fb      	ldrb	r3, [r7, #7]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40020000 	.word	0x40020000

0800048c <main>:

int main(void){
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  TimerDelay_Init();
 8000490:	f7ff fea2 	bl	80001d8 <TimerDelay_Init>
  DHT_Init();
 8000494:	f7ff ff3e 	bl	8000314 <DHT_Init>

  while (1){
	  DHT_Start();
 8000498:	f7ff ff4c 	bl	8000334 <DHT_Start>
	  Response = check_Response();
 800049c:	f7ff ff86 	bl	80003ac <check_Response>
 80004a0:	4603      	mov	r3, r0
 80004a2:	461a      	mov	r2, r3
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <main+0x88>)
 80004a6:	701a      	strb	r2, [r3, #0]
	  Humidity_H = DHT_Read();
 80004a8:	f7ff ffaa 	bl	8000400 <DHT_Read>
 80004ac:	4603      	mov	r3, r0
 80004ae:	461a      	mov	r2, r3
 80004b0:	4b19      	ldr	r3, [pc, #100]	; (8000518 <main+0x8c>)
 80004b2:	701a      	strb	r2, [r3, #0]
	  Humidity_L = DHT_Read();
 80004b4:	f7ff ffa4 	bl	8000400 <DHT_Read>
 80004b8:	4603      	mov	r3, r0
 80004ba:	461a      	mov	r2, r3
 80004bc:	4b17      	ldr	r3, [pc, #92]	; (800051c <main+0x90>)
 80004be:	701a      	strb	r2, [r3, #0]
	  Temperature_H = DHT_Read();
 80004c0:	f7ff ff9e 	bl	8000400 <DHT_Read>
 80004c4:	4603      	mov	r3, r0
 80004c6:	461a      	mov	r2, r3
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <main+0x94>)
 80004ca:	701a      	strb	r2, [r3, #0]
	  Temperature_L = DHT_Read();
 80004cc:	f7ff ff98 	bl	8000400 <DHT_Read>
 80004d0:	4603      	mov	r3, r0
 80004d2:	461a      	mov	r2, r3
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <main+0x98>)
 80004d6:	701a      	strb	r2, [r3, #0]
	  Check_Sum = DHT_Read();
 80004d8:	f7ff ff92 	bl	8000400 <DHT_Read>
 80004dc:	4603      	mov	r3, r0
 80004de:	461a      	mov	r2, r3
 80004e0:	4b11      	ldr	r3, [pc, #68]	; (8000528 <main+0x9c>)
 80004e2:	701a      	strb	r2, [r3, #0]
	  Temperature = (float) ((Temperature_H));
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <main+0x94>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	ee07 3a90 	vmov	s15, r3
 80004ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <main+0xa0>)
 80004f2:	edc3 7a00 	vstr	s15, [r3]
	  Humidity = (float) ((Humidity_H));
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <main+0x8c>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	ee07 3a90 	vmov	s15, r3
 80004fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <main+0xa4>)
 8000504:	edc3 7a00 	vstr	s15, [r3]
	  delay_ms(3000);
 8000508:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800050c:	f7ff fede 	bl	80002cc <delay_ms>
	  DHT_Start();
 8000510:	e7c2      	b.n	8000498 <main+0xc>
 8000512:	bf00      	nop
 8000514:	20000070 	.word	0x20000070
 8000518:	20000073 	.word	0x20000073
 800051c:	20000074 	.word	0x20000074
 8000520:	20000071 	.word	0x20000071
 8000524:	20000072 	.word	0x20000072
 8000528:	20000075 	.word	0x20000075
 800052c:	20000078 	.word	0x20000078
 8000530:	2000007c 	.word	0x2000007c

08000534 <Error_Handler>:
  }
}

void Error_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000538:	b672      	cpsid	i
}
 800053a:	bf00      	nop
  __disable_irq();
  while (1)
 800053c:	e7fe      	b.n	800053c <Error_Handler+0x8>
	...

08000540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a0b      	ldr	r2, [pc, #44]	; (800057c <HAL_TIM_Base_MspInit+0x3c>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d10d      	bne.n	800056e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_TIM_Base_MspInit+0x40>)
 8000558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055a:	4a09      	ldr	r2, [pc, #36]	; (8000580 <HAL_TIM_Base_MspInit+0x40>)
 800055c:	f043 0308 	orr.w	r3, r3, #8
 8000560:	6413      	str	r3, [r2, #64]	; 0x40
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <HAL_TIM_Base_MspInit+0x40>)
 8000564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000566:	f003 0308 	and.w	r3, r3, #8
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40000c00 	.word	0x40000c00
 8000580:	40023800 	.word	0x40023800

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <NMI_Handler+0x4>

0800058a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <HardFault_Handler+0x4>

08000590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <MemManage_Handler+0x4>

08000596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d0:	f000 f83e 	bl	8000650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <SystemInit+0x20>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <SystemInit+0x20>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000634 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000602:	490e      	ldr	r1, [pc, #56]	; (800063c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000604:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000608:	e002      	b.n	8000610 <LoopCopyDataInit>

0800060a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800060c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060e:	3304      	adds	r3, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000614:	d3f9      	bcc.n	800060a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000616:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000618:	4c0b      	ldr	r4, [pc, #44]	; (8000648 <LoopFillZerobss+0x26>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800061c:	e001      	b.n	8000622 <LoopFillZerobss>

0800061e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000620:	3204      	adds	r2, #4

08000622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000624:	d3fb      	bcc.n	800061e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000626:	f7ff ffd7 	bl	80005d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800062a:	f000 fb2b 	bl	8000c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800062e:	f7ff ff2d 	bl	800048c <main>
  bx  lr    
 8000632:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800063c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000640:	08000cec 	.word	0x08000cec
  ldr r2, =_sbss
 8000644:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000648:	20000084 	.word	0x20000084

0800064c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC_IRQHandler>
	...

08000650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_IncTick+0x20>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x24>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <HAL_IncTick+0x24>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000004 	.word	0x20000004
 8000674:	20000080 	.word	0x20000080

08000678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <HAL_RCC_GetHCLKFreq+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000

08000690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e041      	b.n	8000726 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d106      	bne.n	80006bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff42 	bl	8000540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2202      	movs	r2, #2
 80006c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3304      	adds	r3, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	4610      	mov	r0, r2
 80006d0:	f000 f950 	bl	8000974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2201      	movs	r2, #1
 80006d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2201      	movs	r2, #1
 80006e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2201      	movs	r2, #1
 80006e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2201      	movs	r2, #1
 80006f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2201      	movs	r2, #1
 80006f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2201      	movs	r2, #1
 8000700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2201      	movs	r2, #1
 8000708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2201      	movs	r2, #1
 8000710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2201      	movs	r2, #1
 8000718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b01      	cmp	r3, #1
 8000742:	d001      	beq.n	8000748 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	e03c      	b.n	80007c2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2202      	movs	r2, #2
 800074c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <HAL_TIM_Base_Start+0xa0>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d018      	beq.n	800078c <HAL_TIM_Base_Start+0x5c>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000762:	d013      	beq.n	800078c <HAL_TIM_Base_Start+0x5c>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1a      	ldr	r2, [pc, #104]	; (80007d4 <HAL_TIM_Base_Start+0xa4>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d00e      	beq.n	800078c <HAL_TIM_Base_Start+0x5c>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a19      	ldr	r2, [pc, #100]	; (80007d8 <HAL_TIM_Base_Start+0xa8>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d009      	beq.n	800078c <HAL_TIM_Base_Start+0x5c>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a17      	ldr	r2, [pc, #92]	; (80007dc <HAL_TIM_Base_Start+0xac>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d004      	beq.n	800078c <HAL_TIM_Base_Start+0x5c>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <HAL_TIM_Base_Start+0xb0>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d111      	bne.n	80007b0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b06      	cmp	r3, #6
 800079c:	d010      	beq.n	80007c0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f042 0201 	orr.w	r2, r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80007ae:	e007      	b.n	80007c0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f042 0201 	orr.w	r2, r2, #1
 80007be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40010000 	.word	0x40010000
 80007d4:	40000400 	.word	0x40000400
 80007d8:	40000800 	.word	0x40000800
 80007dc:	40000c00 	.word	0x40000c00
 80007e0:	40014000 	.word	0x40014000

080007e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d101      	bne.n	8000800 <HAL_TIM_ConfigClockSource+0x1c>
 80007fc:	2302      	movs	r3, #2
 80007fe:	e0b4      	b.n	800096a <HAL_TIM_ConfigClockSource+0x186>
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2201      	movs	r2, #1
 8000804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2202      	movs	r2, #2
 800080c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800081e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	68ba      	ldr	r2, [r7, #8]
 800082e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000838:	d03e      	beq.n	80008b8 <HAL_TIM_ConfigClockSource+0xd4>
 800083a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800083e:	f200 8087 	bhi.w	8000950 <HAL_TIM_ConfigClockSource+0x16c>
 8000842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000846:	f000 8086 	beq.w	8000956 <HAL_TIM_ConfigClockSource+0x172>
 800084a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800084e:	d87f      	bhi.n	8000950 <HAL_TIM_ConfigClockSource+0x16c>
 8000850:	2b70      	cmp	r3, #112	; 0x70
 8000852:	d01a      	beq.n	800088a <HAL_TIM_ConfigClockSource+0xa6>
 8000854:	2b70      	cmp	r3, #112	; 0x70
 8000856:	d87b      	bhi.n	8000950 <HAL_TIM_ConfigClockSource+0x16c>
 8000858:	2b60      	cmp	r3, #96	; 0x60
 800085a:	d050      	beq.n	80008fe <HAL_TIM_ConfigClockSource+0x11a>
 800085c:	2b60      	cmp	r3, #96	; 0x60
 800085e:	d877      	bhi.n	8000950 <HAL_TIM_ConfigClockSource+0x16c>
 8000860:	2b50      	cmp	r3, #80	; 0x50
 8000862:	d03c      	beq.n	80008de <HAL_TIM_ConfigClockSource+0xfa>
 8000864:	2b50      	cmp	r3, #80	; 0x50
 8000866:	d873      	bhi.n	8000950 <HAL_TIM_ConfigClockSource+0x16c>
 8000868:	2b40      	cmp	r3, #64	; 0x40
 800086a:	d058      	beq.n	800091e <HAL_TIM_ConfigClockSource+0x13a>
 800086c:	2b40      	cmp	r3, #64	; 0x40
 800086e:	d86f      	bhi.n	8000950 <HAL_TIM_ConfigClockSource+0x16c>
 8000870:	2b30      	cmp	r3, #48	; 0x30
 8000872:	d064      	beq.n	800093e <HAL_TIM_ConfigClockSource+0x15a>
 8000874:	2b30      	cmp	r3, #48	; 0x30
 8000876:	d86b      	bhi.n	8000950 <HAL_TIM_ConfigClockSource+0x16c>
 8000878:	2b20      	cmp	r3, #32
 800087a:	d060      	beq.n	800093e <HAL_TIM_ConfigClockSource+0x15a>
 800087c:	2b20      	cmp	r3, #32
 800087e:	d867      	bhi.n	8000950 <HAL_TIM_ConfigClockSource+0x16c>
 8000880:	2b00      	cmp	r3, #0
 8000882:	d05c      	beq.n	800093e <HAL_TIM_ConfigClockSource+0x15a>
 8000884:	2b10      	cmp	r3, #16
 8000886:	d05a      	beq.n	800093e <HAL_TIM_ConfigClockSource+0x15a>
 8000888:	e062      	b.n	8000950 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6818      	ldr	r0, [r3, #0]
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	6899      	ldr	r1, [r3, #8]
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	f000 f965 	bl	8000b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80008ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	609a      	str	r2, [r3, #8]
      break;
 80008b6:	e04f      	b.n	8000958 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	6899      	ldr	r1, [r3, #8]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	f000 f94e 	bl	8000b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	689a      	ldr	r2, [r3, #8]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008da:	609a      	str	r2, [r3, #8]
      break;
 80008dc:	e03c      	b.n	8000958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6818      	ldr	r0, [r3, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	6859      	ldr	r1, [r3, #4]
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	461a      	mov	r2, r3
 80008ec:	f000 f8c2 	bl	8000a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2150      	movs	r1, #80	; 0x50
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f91b 	bl	8000b32 <TIM_ITRx_SetConfig>
      break;
 80008fc:	e02c      	b.n	8000958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6818      	ldr	r0, [r3, #0]
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	6859      	ldr	r1, [r3, #4]
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	461a      	mov	r2, r3
 800090c:	f000 f8e1 	bl	8000ad2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2160      	movs	r1, #96	; 0x60
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f90b 	bl	8000b32 <TIM_ITRx_SetConfig>
      break;
 800091c:	e01c      	b.n	8000958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	6859      	ldr	r1, [r3, #4]
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	461a      	mov	r2, r3
 800092c:	f000 f8a2 	bl	8000a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2140      	movs	r1, #64	; 0x40
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f8fb 	bl	8000b32 <TIM_ITRx_SetConfig>
      break;
 800093c:	e00c      	b.n	8000958 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4619      	mov	r1, r3
 8000948:	4610      	mov	r0, r2
 800094a:	f000 f8f2 	bl	8000b32 <TIM_ITRx_SetConfig>
      break;
 800094e:	e003      	b.n	8000958 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
      break;
 8000954:	e000      	b.n	8000958 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8000956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2201      	movs	r2, #1
 800095c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8000968:	7bfb      	ldrb	r3, [r7, #15]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a34      	ldr	r2, [pc, #208]	; (8000a58 <TIM_Base_SetConfig+0xe4>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d00f      	beq.n	80009ac <TIM_Base_SetConfig+0x38>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000992:	d00b      	beq.n	80009ac <TIM_Base_SetConfig+0x38>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a31      	ldr	r2, [pc, #196]	; (8000a5c <TIM_Base_SetConfig+0xe8>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d007      	beq.n	80009ac <TIM_Base_SetConfig+0x38>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a30      	ldr	r2, [pc, #192]	; (8000a60 <TIM_Base_SetConfig+0xec>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d003      	beq.n	80009ac <TIM_Base_SetConfig+0x38>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a2f      	ldr	r2, [pc, #188]	; (8000a64 <TIM_Base_SetConfig+0xf0>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d108      	bne.n	80009be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a25      	ldr	r2, [pc, #148]	; (8000a58 <TIM_Base_SetConfig+0xe4>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d01b      	beq.n	80009fe <TIM_Base_SetConfig+0x8a>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009cc:	d017      	beq.n	80009fe <TIM_Base_SetConfig+0x8a>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a22      	ldr	r2, [pc, #136]	; (8000a5c <TIM_Base_SetConfig+0xe8>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d013      	beq.n	80009fe <TIM_Base_SetConfig+0x8a>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <TIM_Base_SetConfig+0xec>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d00f      	beq.n	80009fe <TIM_Base_SetConfig+0x8a>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <TIM_Base_SetConfig+0xf0>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d00b      	beq.n	80009fe <TIM_Base_SetConfig+0x8a>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <TIM_Base_SetConfig+0xf4>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d007      	beq.n	80009fe <TIM_Base_SetConfig+0x8a>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <TIM_Base_SetConfig+0xf8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d003      	beq.n	80009fe <TIM_Base_SetConfig+0x8a>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <TIM_Base_SetConfig+0xfc>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d108      	bne.n	8000a10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	689a      	ldr	r2, [r3, #8]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <TIM_Base_SetConfig+0xe4>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d103      	bne.n	8000a44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	691a      	ldr	r2, [r3, #16]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2201      	movs	r2, #1
 8000a48:	615a      	str	r2, [r3, #20]
}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40010000 	.word	0x40010000
 8000a5c:	40000400 	.word	0x40000400
 8000a60:	40000800 	.word	0x40000800
 8000a64:	40000c00 	.word	0x40000c00
 8000a68:	40014000 	.word	0x40014000
 8000a6c:	40014400 	.word	0x40014400
 8000a70:	40014800 	.word	0x40014800

08000a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	6a1b      	ldr	r3, [r3, #32]
 8000a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	6a1b      	ldr	r3, [r3, #32]
 8000a8a:	f023 0201 	bic.w	r2, r3, #1
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	f023 030a 	bic.w	r3, r3, #10
 8000ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	621a      	str	r2, [r3, #32]
}
 8000ac6:	bf00      	nop
 8000ac8:	371c      	adds	r7, #28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b087      	sub	sp, #28
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6a1b      	ldr	r3, [r3, #32]
 8000ae2:	f023 0210 	bic.w	r2, r3, #16
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	031b      	lsls	r3, r3, #12
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	621a      	str	r2, [r3, #32]
}
 8000b26:	bf00      	nop
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b085      	sub	sp, #20
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
 8000b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000b4a:	683a      	ldr	r2, [r7, #0]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	f043 0307 	orr.w	r3, r3, #7
 8000b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	609a      	str	r2, [r3, #8]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	021a      	lsls	r2, r3, #8
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	609a      	str	r2, [r3, #8]
}
 8000b9c:	bf00      	nop
 8000b9e:	371c      	adds	r7, #28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d101      	bne.n	8000bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	e050      	b.n	8000c62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2202      	movs	r2, #2
 8000bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d018      	beq.n	8000c36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c0c:	d013      	beq.n	8000c36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d00e      	beq.n	8000c36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d009      	beq.n	8000c36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d004      	beq.n	8000c36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10c      	bne.n	8000c50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68ba      	ldr	r2, [r7, #8]
 8000c4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2201      	movs	r2, #1
 8000c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40010000 	.word	0x40010000
 8000c74:	40000400 	.word	0x40000400
 8000c78:	40000800 	.word	0x40000800
 8000c7c:	40000c00 	.word	0x40000c00
 8000c80:	40014000 	.word	0x40014000

08000c84 <__libc_init_array>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	4d0d      	ldr	r5, [pc, #52]	; (8000cbc <__libc_init_array+0x38>)
 8000c88:	4c0d      	ldr	r4, [pc, #52]	; (8000cc0 <__libc_init_array+0x3c>)
 8000c8a:	1b64      	subs	r4, r4, r5
 8000c8c:	10a4      	asrs	r4, r4, #2
 8000c8e:	2600      	movs	r6, #0
 8000c90:	42a6      	cmp	r6, r4
 8000c92:	d109      	bne.n	8000ca8 <__libc_init_array+0x24>
 8000c94:	4d0b      	ldr	r5, [pc, #44]	; (8000cc4 <__libc_init_array+0x40>)
 8000c96:	4c0c      	ldr	r4, [pc, #48]	; (8000cc8 <__libc_init_array+0x44>)
 8000c98:	f000 f818 	bl	8000ccc <_init>
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	10a4      	asrs	r4, r4, #2
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	42a6      	cmp	r6, r4
 8000ca4:	d105      	bne.n	8000cb2 <__libc_init_array+0x2e>
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
 8000ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cac:	4798      	blx	r3
 8000cae:	3601      	adds	r6, #1
 8000cb0:	e7ee      	b.n	8000c90 <__libc_init_array+0xc>
 8000cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cb6:	4798      	blx	r3
 8000cb8:	3601      	adds	r6, #1
 8000cba:	e7f2      	b.n	8000ca2 <__libc_init_array+0x1e>
 8000cbc:	08000ce4 	.word	0x08000ce4
 8000cc0:	08000ce4 	.word	0x08000ce4
 8000cc4:	08000ce4 	.word	0x08000ce4
 8000cc8:	08000ce8 	.word	0x08000ce8

08000ccc <_init>:
 8000ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cce:	bf00      	nop
 8000cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd2:	bc08      	pop	{r3}
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	4770      	bx	lr

08000cd8 <_fini>:
 8000cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cda:	bf00      	nop
 8000cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cde:	bc08      	pop	{r3}
 8000ce0:	469e      	mov	lr, r3
 8000ce2:	4770      	bx	lr
